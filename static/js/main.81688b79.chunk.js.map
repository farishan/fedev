{"version":3,"sources":["utils/api.js","components/developer-list.js","App.js","serviceWorker.js","index.js"],"names":["firebase","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","api","postData","collection","data","console","log","add","then","docRef","alert","id","catch","error","getData","Promise","resolve","get","querySnapshot","result","forEach","doc","obj","push","once","ProfileCard","className","name","bio","experience","stacks","map","s","index","key","phone","href","link","target","rel","email","style","textTransform","domicile","available","DeveloperList","React","useState","developers","setDevelopers","useEffect","res","dev","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"uQAeAA,gBAXuB,CACrBC,OAAQC,0CACRC,WAAY,+CACZC,YAAa,sDACbC,UAAW,+BACXC,cAAe,2CACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAKjB,IAAMC,EAAKV,cA6BIW,EA3BH,CACVC,SAAU,SAACC,EAAYC,GACrBC,QAAQC,IAAI,YAAaF,GACzBJ,EAAGG,WAAWA,GAAYI,IAAIH,GAC7BI,MAAK,SAASC,GACbC,MAAM,WACNL,QAAQC,IAAI,6BAA8BG,EAAOE,OAElDC,OAAM,SAASC,GACdH,MAAM,UACNL,QAAQQ,MAAM,0BAA2BA,OAG7CC,QAAS,SAACX,GACR,OAAO,IAAIY,SAAQ,SAACC,GAClBhB,EAAGG,WAAWA,GAAYc,MAAMT,MAAK,SAACU,GACpC,IAAMC,EAAS,GACfD,EAAcE,SAAQ,SAACC,GACrB,IAAMC,EAAG,aAAIX,GAAIU,EAAIV,IAAOU,EAAIjB,QAChCe,EAAOI,KAAKD,MAEdN,EAAQG,WCrCZK,GAAO,EAELC,EAAc,SAAC,GAAY,IAAXrB,EAAU,EAAVA,KACpB,OACE,yBAAKsB,UAAU,qCAYb,wBAAIA,UAAU,+BAA+BtB,EAAKuB,MAElD,yBAAKD,UAAU,WACb,yBAAKA,UAAU,sBACb,uBAAGA,UAAU,QAAQtB,EAAKwB,KAC1B,iDAAuBxB,EAAKyB,WAA5B,WAGF,yBAAKH,UAAU,sBAEXtB,EAAK0B,QAAU1B,EAAK0B,OAAOC,KAAI,SAACC,EAAGC,GAAJ,OAC7B,uBAAGC,IAAKD,GAAQD,OAKtB,yBAAKN,UAAU,aACb,2BAAItB,EAAK+B,OACT,2BAAG,uBAAGC,KAAMhC,EAAKiC,KAAMC,OAAO,SAASC,IAAI,uBAAuBnC,EAAKiC,OACvE,uBAAGX,UAAU,QAAO,uBAAGU,KAAI,iBAAYhC,EAAKoC,QAAUpC,EAAKoC,QAC3D,uBAAGC,MAAO,CAACC,cAAe,eAAgBtC,EAAKuC,WAI5B,SAAnBvC,EAAKwC,WACL,uBAAGlB,UAAU,qEAAb,iBASJmB,EAAgB,WAAO,IAAD,EACUC,IAAMC,SAAS,CAAC,CAACpB,KAAM,aADjC,mBACnBqB,EADmB,KACPC,EADO,KAU1B,OARAH,IAAMI,WAAU,YACF,IAAT1B,IACDA,GAAO,EACPvB,EAAIa,QAAQ,cAAcN,MAAK,SAAC2C,GAC9BF,EAAcE,SAGjB,IAED,yBAAKzB,UAAU,qBACb,yBAAKA,UAAU,sCAEXsB,EAAWjB,KAAI,SAACqB,EAAKnB,GAAN,OACb,yBACEC,IAAKD,EACLP,UAAU,sDAEV,kBAAC,EAAD,CAAatB,KAAMgD,WChDlBC,MAlBf,WACE,OACE,yBAAK3B,UAAU,OACb,yBAAKA,UAAU,qBACb,wBAAIA,UAAU,gCACZ,uBAAGU,KAAK,KAAR,aAEF,6DAGA,EAGF,kBAAC,EAAD,QCPckB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1D,MAAK,SAAA2D,GACJA,EAAaC,gBAEdxD,OAAM,SAAAC,GACLR,QAAQQ,MAAMA,EAAMwD,c","file":"static/js/main.81688b79.chunk.js","sourcesContent":["import * as firebase from \"firebase/app\";\n// import \"firebase/auth\";\nimport \"firebase/firestore\";\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: \"frontend-developer-indonesia.firebaseapp.com\",\n  databaseURL: \"https://frontend-developer-indonesia.firebaseio.com\",\n  projectId: \"frontend-developer-indonesia\",\n  storageBucket: \"frontend-developer-indonesia.appspot.com\",\n  messagingSenderId: \"503231267566\",\n  appId: \"1:503231267566:web:36c405ce56e147d7b229ff\",\n  measurementId: \"G-BZMX5GBC6P\"\n}\n\nfirebase.initializeApp(firebaseConfig);\n\nconst db = firebase.firestore()\n\nconst api = {\n  postData: (collection, data) => {\n    console.log('post data', data)\n    db.collection(collection).add(data)\n    .then(function(docRef) {\n      alert('success')\n      console.log(\"Document written with ID: \", docRef.id);\n    })\n    .catch(function(error) {\n      alert('failed')\n      console.error(\"Error adding document: \", error);\n    });\n  },\n  getData: (collection) => {\n    return new Promise((resolve) => {\n      db.collection(collection).get().then((querySnapshot) => {\n        const result = []\n        querySnapshot.forEach((doc) => {\n          const obj = {id: doc.id, ...doc.data()}\n          result.push(obj)\n        });\n        resolve(result)\n      });\n    })\n  }\n}\n\nexport default api","import React from 'react'\nimport api from '../utils/api'\n\nlet once = false\n\nconst ProfileCard = ({data}) => {\n  return (\n    <div className=\"border border-gray-400 p-4 h-full\">\n      {/* <input onChange={updateForm} name=\"name\" placeholder=\"name\" />\n      <input onChange={updateForm} name=\"bio\" placeholder=\"bio\" />\n      <input onChange={updateForm} name=\"domicile\" placeholder=\"domicile\" />\n      <input onChange={updateForm} name=\"email\" placeholder=\"email\" type=\"email\" />\n      <input onChange={updateForm} name=\"experience\" placeholder=\"experience\" type=\"number\" />\n      <input onChange={updateForm} name=\"link\" placeholder=\"link\" />\n      <input onChange={updateForm} name=\"phone\" placeholder=\"phone\" />\n      <input onChange={updateForm} name=\"tech1\" placeholder=\"tech 1\" />\n      <input onChange={updateForm} name=\"tech2\" placeholder=\"tech 2\" />\n      <input onChange={updateForm} name=\"tech3\" placeholder=\"tech 3\" />\n      <select onChange={updateForm} name=\"available\"></select> */}\n      <h4 className=\"text-2xl pb-2 border-b mb-2\">{data.name}</h4>\n\n      <div className=\"text-sm\">\n        <div className=\"pb-2 border-b mb-2\">\n          <p className=\"mb-2\">{data.bio}</p>\n          <p>Pengalaman bekerja {data.experience} bulan</p>\n        </div>\n\n        <div className=\"pb-2 border-b mb-2\">\n          {\n            data.stacks && data.stacks.map((s, index) => (\n              <p key={index}>{s}</p>\n            ))\n          }\n        </div>\n\n        <div className=\"pb-2 mb-2\">\n          <p>{data.phone}</p>\n          <p><a href={data.link} target=\"_blank\" rel=\"noopener noreferrer\">{data.link}</a></p>\n          <p className=\"mb-2\"><a href={`mailto:${data.email}`}>{data.email}</a></p>\n          <p style={{textTransform: 'capitalize'}}>{data.domicile}</p>\n        </div>\n\n        {\n          data.available === 'true' &&\n          <p className=\"bg-green-600 p-1 rounded text-white font-bold text-xs text-center\">\n            Siap Kerja\n          </p>\n        }\n      </div>\n    </div>\n  )\n}\n\nconst DeveloperList = () => {\n  const [developers, setDevelopers] = React.useState([{name: 'default'}])\n  React.useEffect(() => {\n    if(once === false){\n      once = true\n      api.getData('developers').then((res) => {\n        setDevelopers(res)\n      })\n    }\n  }, [])\n  return (\n    <div className=\"container mx-auto\">\n      <div className=\"flex flex-wrap min-w-full md:-mx-4\">\n        {\n          developers.map((dev, index) => (\n            <div\n              key={index}\n              className=\"w-full md:w-1/2 lg:w-1/4 md:px-4 mb-4 object-cover\"\n            >\n              <ProfileCard data={dev} />\n            </div>\n          ))\n        }\n      </div>\n    </div>\n  )\n}\n\nexport { DeveloperList }","import React from 'react';\nimport {\n  DeveloperForm,\n  DeveloperList\n} from './components'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"container mx-auto\">\n        <h1 className=\"text-4xl font-bold uppercase\">\n          <a href=\"/\">fedev.id</a>\n        </h1>\n        <p>Frontend Developer Indonesia</p>\n      </div>\n      {\n        false &&\n        <DeveloperForm />\n      }\n      <DeveloperList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './utils/tailwind.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}